// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// FireworkCreateRequest 花火を作成するためのリクエストボディ
type FireworkCreateRequest struct {
	// Image 花火の元となる画像ファイル
	Image openapi_types.File `json:"image"`

	// IsShareable 花火が共有可能かどうか
	IsShareable bool `json:"isShareable"`
}

// FireworkResponse 花火のレスポンスデータ
type FireworkResponse struct {
	// CreatedAt 花火の作成日時
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id 花火のID
	Id int64 `json:"id"`

	// IsShareable 花火が共有可能かどうか
	IsShareable bool `json:"isShareable"`

	// PixelData 花火のピクセルデータ
	PixelData []bool `json:"pixelData"`

	// UpdatedAt 花火の更新日時
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FireworkUpdateRequest 花火を更新するためのリクエストボディ
type FireworkUpdateRequest struct {
	// IsShareable 花火が共有可能かどうか
	IsShareable bool `json:"isShareable"`
}

// CreateFireworkMultipartRequestBody defines body for CreateFirework for multipart/form-data ContentType.
type CreateFireworkMultipartRequestBody = FireworkCreateRequest

// UpdateFireworkJSONRequestBody defines body for UpdateFirework for application/json ContentType.
type UpdateFireworkJSONRequestBody = FireworkUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 花火の一覧を取得する
	// (GET /fireworks)
	GetFireworks(ctx echo.Context) error
	// 花火を作成する
	// (POST /fireworks)
	CreateFirework(ctx echo.Context) error
	// IDで指定した花火を削除
	// (DELETE /fireworks/{id})
	DeleteFirework(ctx echo.Context, id int64) error
	// IDで指定した花火を取得
	// (GET /fireworks/{id})
	GetFireworkById(ctx echo.Context, id int64) error
	// IDで指定した花火の共有設定を更新
	// (PUT /fireworks/{id})
	UpdateFirework(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFireworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetFireworks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFireworks(ctx)
	return err
}

// CreateFirework converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFirework(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFirework(ctx)
	return err
}

// DeleteFirework converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFirework(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFirework(ctx, id)
	return err
}

// GetFireworkById converts echo context to params.
func (w *ServerInterfaceWrapper) GetFireworkById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFireworkById(ctx, id)
	return err
}

// UpdateFirework converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFirework(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateFirework(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/fireworks", wrapper.GetFireworks)
	router.POST(baseURL+"/fireworks", wrapper.CreateFirework)
	router.DELETE(baseURL+"/fireworks/:id", wrapper.DeleteFirework)
	router.GET(baseURL+"/fireworks/:id", wrapper.GetFireworkById)
	router.PUT(baseURL+"/fireworks/:id", wrapper.UpdateFirework)

}
