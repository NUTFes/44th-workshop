/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * My AR Project API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

/**
 * 花火を作成するためのリクエストボディ
 */
export interface FireworkCreateRequest {
  /** 花火が共有可能かどうか */
  isShareable: boolean;
  /** 花火の元となる画像ファイル */
  image: Blob;
}

/**
 * 花火を更新するためのリクエストボディ
 */
export interface FireworkUpdateRequest {
  /** 花火が共有可能かどうか */
  isShareable: boolean;
}

/**
 * 花火のレスポンスデータ
 */
export interface FireworkResponse {
  /** 花火のID */
  id: number;
  /** 花火が共有可能かどうか */
  isShareable: boolean;
  /** 花火のピクセルデータ */
  pixelData: boolean[];
  /** 花火の作成日時 */
  createdAt?: string;
  /** 花火の更新日時 */
  updatedAt?: string;
}

/**
 * @summary 花火の一覧を取得する
 */
export const getFireworks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FireworkResponse[]>> => {
    
    
    return axios.default.get(
      `/fireworks`,options
    );
  }


export const getGetFireworksQueryKey = () => {
    return [`/fireworks`] as const;
    }

    
export const getGetFireworksQueryOptions = <TData = Awaited<ReturnType<typeof getFireworks>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFireworksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFireworks>>> = ({ signal }) => getFireworks({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFireworksQueryResult = NonNullable<Awaited<ReturnType<typeof getFireworks>>>
export type GetFireworksQueryError = AxiosError<unknown>


export function useGetFireworks<TData = Awaited<ReturnType<typeof getFireworks>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFireworks>>,
          TError,
          Awaited<ReturnType<typeof getFireworks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFireworks<TData = Awaited<ReturnType<typeof getFireworks>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFireworks>>,
          TError,
          Awaited<ReturnType<typeof getFireworks>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFireworks<TData = Awaited<ReturnType<typeof getFireworks>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 花火の一覧を取得する
 */

export function useGetFireworks<TData = Awaited<ReturnType<typeof getFireworks>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFireworksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary 花火を作成する
 */
export const createFirework = (
    fireworkCreateRequest: FireworkCreateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FireworkResponse>> => {
    
    const formData = new FormData();
formData.append(`isShareable`, fireworkCreateRequest.isShareable.toString())
formData.append(`image`, fireworkCreateRequest.image)

    return axios.default.post(
      `/fireworks`,
      formData,options
    );
  }



export const getCreateFireworkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFirework>>, TError,{data: FireworkCreateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createFirework>>, TError,{data: FireworkCreateRequest}, TContext> => {

const mutationKey = ['createFirework'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFirework>>, {data: FireworkCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createFirework(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFireworkMutationResult = NonNullable<Awaited<ReturnType<typeof createFirework>>>
    export type CreateFireworkMutationBody = FireworkCreateRequest
    export type CreateFireworkMutationError = AxiosError<unknown>

    /**
 * @summary 花火を作成する
 */
export const useCreateFirework = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFirework>>, TError,{data: FireworkCreateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createFirework>>,
        TError,
        {data: FireworkCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateFireworkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary IDで指定した花火を取得
 */
export const getFireworkById = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FireworkResponse>> => {
    
    
    return axios.default.get(
      `/fireworks/${id}`,options
    );
  }


export const getGetFireworkByIdQueryKey = (id: number,) => {
    return [`/fireworks/${id}`] as const;
    }

    
export const getGetFireworkByIdQueryOptions = <TData = Awaited<ReturnType<typeof getFireworkById>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFireworkByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFireworkById>>> = ({ signal }) => getFireworkById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFireworkByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getFireworkById>>>
export type GetFireworkByIdQueryError = AxiosError<unknown>


export function useGetFireworkById<TData = Awaited<ReturnType<typeof getFireworkById>>, TError = AxiosError<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFireworkById>>,
          TError,
          Awaited<ReturnType<typeof getFireworkById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFireworkById<TData = Awaited<ReturnType<typeof getFireworkById>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFireworkById>>,
          TError,
          Awaited<ReturnType<typeof getFireworkById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFireworkById<TData = Awaited<ReturnType<typeof getFireworkById>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary IDで指定した花火を取得
 */

export function useGetFireworkById<TData = Awaited<ReturnType<typeof getFireworkById>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFireworkById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFireworkByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary IDで指定した花火の共有設定を更新
 */
export const updateFirework = (
    id: number,
    fireworkUpdateRequest: FireworkUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FireworkResponse>> => {
    
    
    return axios.default.put(
      `/fireworks/${id}`,
      fireworkUpdateRequest,options
    );
  }



export const getUpdateFireworkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFirework>>, TError,{id: number;data: FireworkUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateFirework>>, TError,{id: number;data: FireworkUpdateRequest}, TContext> => {

const mutationKey = ['updateFirework'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateFirework>>, {id: number;data: FireworkUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateFirework(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateFireworkMutationResult = NonNullable<Awaited<ReturnType<typeof updateFirework>>>
    export type UpdateFireworkMutationBody = FireworkUpdateRequest
    export type UpdateFireworkMutationError = AxiosError<unknown>

    /**
 * @summary IDで指定した花火の共有設定を更新
 */
export const useUpdateFirework = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateFirework>>, TError,{id: number;data: FireworkUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateFirework>>,
        TError,
        {id: number;data: FireworkUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateFireworkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary IDで指定した花火を削除
 */
export const deleteFirework = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.delete(
      `/fireworks/${id}`,options
    );
  }



export const getDeleteFireworkMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFirework>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteFirework>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteFirework'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFirework>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteFirework(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteFireworkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFirework>>>
    
    export type DeleteFireworkMutationError = AxiosError<unknown>

    /**
 * @summary IDで指定した花火を削除
 */
export const useDeleteFirework = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteFirework>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteFirework>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteFireworkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
