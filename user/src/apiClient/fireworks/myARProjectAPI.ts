/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * My AR Project API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";

import type {
	FireworkCreateRequest,
	FireworkResponse,
	FireworkUpdateRequest,
} from "../schemas";

import { customFetch } from "../customFetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Ëä±ÁÅ´„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 */
export const getGetFireworksUrl = () => {
	return `/fireworks`;
};

export const getFireworks = async (
	options?: RequestInit,
): Promise<FireworkResponse[]> => {
	return customFetch<FireworkResponse[]>(getGetFireworksUrl(), {
		...options,
		method: "GET",
	});
};

export const getGetFireworksQueryKey = () => {
	return [`/fireworks`] as const;
};

export const getGetFireworksQueryOptions = <
	TData = Awaited<ReturnType<typeof getFireworks>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>
	>;
	request?: SecondParameter<typeof customFetch>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetFireworksQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getFireworks>>> = ({
		signal,
	}) => getFireworks({ signal, ...requestOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getFireworks>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFireworksQueryResult = NonNullable<
	Awaited<ReturnType<typeof getFireworks>>
>;
export type GetFireworksQueryError = unknown;

export function useGetFireworks<
	TData = Awaited<ReturnType<typeof getFireworks>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getFireworks>>,
					TError,
					Awaited<ReturnType<typeof getFireworks>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFireworks<
	TData = Awaited<ReturnType<typeof getFireworks>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getFireworks>>,
					TError,
					Awaited<ReturnType<typeof getFireworks>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFireworks<
	TData = Awaited<ReturnType<typeof getFireworks>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ëä±ÁÅ´„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 */

export function useGetFireworks<
	TData = Awaited<ReturnType<typeof getFireworks>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getFireworks>>, TError, TData>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetFireworksQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Ëä±ÁÅ´„Çí‰ΩúÊàê„Åô„Çã
 */
export const getCreateFireworkUrl = () => {
	return `/fireworks`;
};

export const createFirework = async (
	fireworkCreateRequest: FireworkCreateRequest,
	options?: RequestInit,
): Promise<FireworkResponse> => {
	const formData = new FormData();
	formData.append(`isShareable`, fireworkCreateRequest.isShareable.toString());
	formData.append(`image`, fireworkCreateRequest.image);

	return customFetch<FireworkResponse>(getCreateFireworkUrl(), {
		...options,
		method: "POST",
		body: formData,
	});
};

export const getCreateFireworkMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createFirework>>,
		TError,
		{ data: FireworkCreateRequest },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createFirework>>,
	TError,
	{ data: FireworkCreateRequest },
	TContext
> => {
	const mutationKey = ["createFirework"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createFirework>>,
		{ data: FireworkCreateRequest }
	> = (props) => {
		const { data } = props ?? {};

		return createFirework(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateFireworkMutationResult = NonNullable<
	Awaited<ReturnType<typeof createFirework>>
>;
export type CreateFireworkMutationBody = FireworkCreateRequest;
export type CreateFireworkMutationError = unknown;

/**
 * @summary Ëä±ÁÅ´„Çí‰ΩúÊàê„Åô„Çã
 */
export const useCreateFirework = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createFirework>>,
			TError,
			{ data: FireworkCreateRequest },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createFirework>>,
	TError,
	{ data: FireworkCreateRequest },
	TContext
> => {
	const mutationOptions = getCreateFireworkMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÇíÂèñÂæó
 */
export const getGetFireworkByIdUrl = (id: number) => {
	return `/fireworks/${id}`;
};

export const getFireworkById = async (
	id: number,
	options?: RequestInit,
): Promise<FireworkResponse> => {
	return customFetch<FireworkResponse>(getGetFireworkByIdUrl(id), {
		...options,
		method: "GET",
	});
};

export const getGetFireworkByIdQueryKey = (id?: number) => {
	return [`/fireworks/${id}`] as const;
};

export const getGetFireworkByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getFireworkById>>,
	TError = unknown,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getFireworkById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetFireworkByIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getFireworkById>>> = ({
		signal,
	}) => getFireworkById(id, { signal, ...requestOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getFireworkById>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFireworkByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getFireworkById>>
>;
export type GetFireworkByIdQueryError = unknown;

export function useGetFireworkById<
	TData = Awaited<ReturnType<typeof getFireworkById>>,
	TError = unknown,
>(
	id: number,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getFireworkById>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getFireworkById>>,
					TError,
					Awaited<ReturnType<typeof getFireworkById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFireworkById<
	TData = Awaited<ReturnType<typeof getFireworkById>>,
	TError = unknown,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getFireworkById>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getFireworkById>>,
					TError,
					Awaited<ReturnType<typeof getFireworkById>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFireworkById<
	TData = Awaited<ReturnType<typeof getFireworkById>>,
	TError = unknown,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getFireworkById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÇíÂèñÂæó
 */

export function useGetFireworkById<
	TData = Awaited<ReturnType<typeof getFireworkById>>,
	TError = unknown,
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getFireworkById>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetFireworkByIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÅÆÂÖ±ÊúâË®≠ÂÆö„ÇíÊõ¥Êñ∞
 */
export const getUpdateFireworkUrl = (id: number) => {
	return `/fireworks/${id}`;
};

export const updateFirework = async (
	id: number,
	fireworkUpdateRequest: FireworkUpdateRequest,
	options?: RequestInit,
): Promise<FireworkResponse> => {
	return customFetch<FireworkResponse>(getUpdateFireworkUrl(id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(fireworkUpdateRequest),
	});
};

export const getUpdateFireworkMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateFirework>>,
		TError,
		{ id: number; data: FireworkUpdateRequest },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateFirework>>,
	TError,
	{ id: number; data: FireworkUpdateRequest },
	TContext
> => {
	const mutationKey = ["updateFirework"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateFirework>>,
		{ id: number; data: FireworkUpdateRequest }
	> = (props) => {
		const { id, data } = props ?? {};

		return updateFirework(id, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateFireworkMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateFirework>>
>;
export type UpdateFireworkMutationBody = FireworkUpdateRequest;
export type UpdateFireworkMutationError = unknown;

/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÅÆÂÖ±ÊúâË®≠ÂÆö„ÇíÊõ¥Êñ∞
 */
export const useUpdateFirework = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateFirework>>,
			TError,
			{ id: number; data: FireworkUpdateRequest },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateFirework>>,
	TError,
	{ id: number; data: FireworkUpdateRequest },
	TContext
> => {
	const mutationOptions = getUpdateFireworkMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÇíÂâäÈô§
 */
export const getDeleteFireworkUrl = (id: number) => {
	return `/fireworks/${id}`;
};

export const deleteFirework = async (
	id: number,
	options?: RequestInit,
): Promise<unknown> => {
	return customFetch<unknown>(getDeleteFireworkUrl(id), {
		...options,
		method: "DELETE",
	});
};

export const getDeleteFireworkMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteFirework>>,
		TError,
		{ id: number },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteFirework>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationKey = ["deleteFirework"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteFirework>>,
		{ id: number }
	> = (props) => {
		const { id } = props ?? {};

		return deleteFirework(id, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteFireworkMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteFirework>>
>;

export type DeleteFireworkMutationError = unknown;

/**
 * @summary ID„ÅßÊåáÂÆö„Åó„ÅüËä±ÁÅ´„ÇíÂâäÈô§
 */
export const useDeleteFirework = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteFirework>>,
			TError,
			{ id: number },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteFirework>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteFireworkMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
